# CI/CD
stages:
  - sast
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/
  - dist/
  
before_script:
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  - aws configure set region $AWS_DEFAULT_REGION
  - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
  - IMAGE_TAG=latest

sonarqube-check:
  stage: sast
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    variables:
      - $CI_COMMIT_REF_PROTECTED == "true"

build_development:
  stage: build
  script:
  - npm install
  - npm run build-dev
  only: ['development']
  
build_stage:
  stage: build
  script:
  - npm install
  - npm run build-stage
  only: ['stage']

#build_production:
#  stage: build
#  script:
#  - npm install
#  - npm run build-prod
#  only: ['master']

build_prod:
  stage: build
  script:
    - echo "Building image..."
    - docker build -t $REPOSITORY_URL:latest .
    - echo "Tagging image..."
    - docker tag $REPOSITORY_URL:latest $REPOSITORY_URL:$IMAGE_TAG
    - echo "Pushing image..."
    - docker push $REPOSITORY_URL:latest
    - docker push $REPOSITORY_URL:$IMAGE_TAG
  only:
    - master

deploy_development:
  stage: deploy
  script:
  - rsync -zvhr -e ssh . ubuntu@$Dev_Server_IP:/var/site/dev/taskopad-apis-nodejs/
  - ssh ubuntu@$Dev_Server_IP 'pm2 restart taskopad-dev-api'
  only: ['development']
  
deploy_stage:
  stage: deploy
  script:
  - rsync -zvhr -e ssh . ubuntu@$Dev_Server_IP:/var/site/stage/taskopad-apis-nodejs/
  - ssh ubuntu@$Dev_Server_IP 'pm2 restart taskopad-stage-api'
  only: ['stage']

#deploy_production:
#  stage: deploy
#  script:
#  - rsync -zvhr -e ssh . ubuntu@$Prod_Server_IP:/var/sites/taskopad-apis-nodejs/
#  - ssh ubuntu@$Prod_Server_IP 'pm2 restart taskopad-api'
#  - rsync -zvhr -e ssh . ubuntu@$Demo_Server_IP:/var/sites/taskopad-apis-nodejs/
#  - ssh ubuntu@$Demo_Server_IP 'pm2 restart taskopad-api'  
#  only: ['master']

deploy_prod:
  stage: deploy
  script:
    - echo $REPOSITORY_URL:$IMAGE_TAG
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URL:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
    - echo "Registering new container definition..."
    - new_image_name=$REPOSITORY_URL:$IMAGE_TAG
    - current_task=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME")
    - task_memory=$(echo $current_task | jq '.taskDefinition.memory' | bc)
    - execution_role_arn="arn:aws:iam::424779238228:role/ecsTaskExecutionRole"
    - current_container_definitions=$(echo $current_task | jq '.taskDefinition.containerDefinitions')
    - new_container_definitions=$(echo $current_container_definitions | jq --arg val $new_image_name '.[0].image = $val')


    - new_task_definition=$(aws ecs register-task-definition --container-definitions "$NEW_CONTAINER_DEFINTIION" --family "${TASK_DEFINITION_NAME}" --execution-role-arn "$execution_role_arn")

    #- aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
  only:
    - master
