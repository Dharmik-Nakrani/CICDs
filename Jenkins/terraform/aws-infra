pipeline {
    agent any

    options {
        ansiColor('xterm')
        timestamps() // Adds timestamps to logs for better traceability
    }

    environment {
        # AWS credentials and region (passed via Jenkins parameters or credentials)
        AWS_ACCESS_KEY_ID     = "${params.AWS_ACCESS_KEY}"
        AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_KEY}"
        AWS_DEFAULT_REGION     = "${params.AWS_REGION}"

        # Terraform variables
        TF_VAR_vpc_name              = "${params.VPC_NAME}"
        TF_VAR_vpc_cidr              = "${params.VPC_CIDR}"
        TF_VAR_vpc_az                = "[${params.VPC_AZ}]"
        TF_VAR_vpc_private_subnets   = "[${params.VPC_PRIVATE_SUBNETS}]"
        TF_VAR_vpc_public_subnets    = "[${params.VPC_PUBLIC_SUBNETS}]"
        TF_VAR_vpc_enable_nat_gateway = "${params.VPC_NAT_GATEWAY_ENABLE}"

        TF_VAR_ports                 = "[${params.PORT}]"
        TF_VAR_ec2_ami               = "${params.EC2_AMI}"
        TF_VAR_ec2_instance_type     = "${params.EC2_INSTANCE_TYPE}"
        TF_VAR_project_name          = "${params.PROJECT_NAME}"
        TF_VAR_key_name              = "${params.KEY_NAME}"

        TF_VAR_bucket_name           = "[${params.BUCKET_NAME}]"
        TF_VAR_bucket_tag            = "[${params.BUCKET_NAME}]"
        TF_VAR_cnames                = "[${params.CNAME}]"
        TF_VAR_acm_arn               = "${params.ACM_ARN}"
    }

    stages {

        stage('Checkout Infrastructure Code') {
            steps {
                checkout scmGit(
                    branches: [[name: 'main']],
                    extensions: [cloneOption(depth: 1, shallow: true)],
                    userRemoteConfigs: [[
                        credentialsId: 'aws-terraform-repo-creds',
                        url: 'https://dev.azure.com/<YOUR_ORG_NAME>/DevOps/_git/aws-infra-terraform'
                    ]]
                )
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Terraform Plan') {
            steps {
                echo "Running Terraform plan for project: ${env.TF_VAR_project_name}"
                sh 'terraform plan -input=false'
            }
        }

        stage('Terraform Apply') {
            when {
                expression { return params.APPLY_CHANGES == true }
            }
            steps {
                sh 'terraform apply -auto-approve -input=false'
            }
        }

        stage('Archive Terraform State') {
            steps {
                archiveArtifacts artifacts: 'terraform.tfstate', followSymlinks: false
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
