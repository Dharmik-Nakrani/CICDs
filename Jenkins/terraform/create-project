pipeline {
    agent any

    environment {
        # Replace with your own organizationâ€™s Azure DevOps service URL
        AZDO_ORG_SERVICE_URL = "https://dev.azure.com/<YOUR_ORG_NAME>/"

        # Jenkins credential ID for your Azure DevOps PAT (configure in Jenkins UI)
        AZDO_PERSONAL_ACCESS_TOKEN = credentials('azdo-pat-token')

        # Dynamic Terraform variable from pipeline parameters
        TF_VAR_AUTH = "${params.AZURE_TOKEN}"
    }

    stages {    

        stage('Set Terraform Variables') {
            steps {
                script {
                    env.TF_VAR_PROJECT_NAME = "${params.PROJECT_NAME}"
                    env.TF_VAR_PROJECT_DETAILS = "Terraform Managed Repository"
                    
                    // Clean up and set repository name
                    def techList = "[${params.TECHNOLOGIES}]".replaceAll('\\\\', '')
                    env.TF_VAR_REPO_NAME = techList
                }
            }
        } 

        stage('Checkout Infrastructure Code') {
            steps {
                checkout scmGit(
                    branches: [[name: 'infra/azure-standard-template']],
                    extensions: [cloneOption(depth: 1, shallow: true)],
                    userRemoteConfigs: [[
                        url: 'git@ssh.dev.azure.com:v3/<YOUR_ORG_NAME>/DevOps/terraform-infra-template'
                    ]]
                ) 
            }
        }    

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Plan') {
            steps {
                echo "Terraform Plan for ${env.TF_VAR_PROJECT_NAME}"
                sh 'terraform plan'
            }
        }

        stage('Terraform Apply') {
            steps {
                sh 'terraform apply --auto-approve'
            }
        }

        stage('Archive Terraform State') {
            steps {
                archiveArtifacts artifacts: 'terraform.tfstate', followSymlinks: false      
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
